{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","categoryState","atom","key","default","TO_DO","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","DOING","DONE","ToDoList","useRecoilState","setCategory","console","log","value","onInput","map","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.88e069fb.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\n\nexport enum Categories {\n  \"TO_DO\" = \"TO_DO\",\n  \"DOING\" = \"DOING\",\n  \"DONE\" = \"DONE\",\n}\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: Categories;\n}\n\nexport const categoryState = atom<Categories>({\n  key: \"category\",\n  default: Categories.TO_DO,\n});\n\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: [],\n});\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, toDoState } from \"../atoms\";\n\ninterface IForm {\n  toDo: string;\n}\n\nfunction CreateToDo() {\n  const setToDos = useSetRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const handleValid = ({ toDo }: IForm) => {\n    setToDos((oldToDos) => [\n      { text: toDo, id: Date.now(), category },\n      ...oldToDos,\n    ]);\n    setValue(\"toDo\", \"\");\n  };\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register(\"toDo\", {\n          required: \"Please write a To Do\",\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n    </form>\n  );\n}\n\nexport default CreateToDo;\n","import React from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport { Categories, IToDo, toDoState } from \"../atoms\";\n\nfunction ToDo({ text, category, id }: IToDo) {\n  const setToDos = useSetRecoilState(toDoState);\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name },\n    } = event;\n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      const newToDo = { text, id, category: name as any };\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    });\n  };\n  return (\n    <li>\n      <span>{text}</span>\n      {category !== Categories.DOING && (\n        <button name={Categories.DOING} onClick={onClick}>\n          Doing\n        </button>\n      )}\n      {category !== Categories.TO_DO && (\n        <button name={Categories.TO_DO} onClick={onClick}>\n          To Do\n        </button>\n      )}\n      {category !== Categories.DONE && (\n        <button name={Categories.DONE} onClick={onClick}>\n          Done\n        </button>\n      )}\n    </li>\n  );\n}\n\nexport default ToDo;\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { Categories, categoryState, toDoSelector } from \"../atoms\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\nfunction ToDoList() {\n  const toDos = useRecoilValue(toDoSelector);\n  const [category, setCategory] = useRecoilState(categoryState);\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n  console.log(toDos);\n  return (\n    <div>\n      <h1>To Dos</h1>\n      <hr />\n      <select value={category} onInput={onInput}>\n        <option value={Categories.TO_DO}>To Do</option>\n        <option value={Categories.DOING}>Doing</option>\n        <option value={Categories.DONE}>Done</option>\n      </select>\n      <CreateToDo />\n      {toDos?.map((toDo) => (\n        <ToDo key={toDo.id} {...toDo} />\n      ))}\n    </div>\n  );\n}\n\nexport default ToDoList;\n","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"transparent\",\n};\n"],"sourceRoot":""}